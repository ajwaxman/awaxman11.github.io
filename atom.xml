<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Build, Break, Learn.]]></title>
  <link href="http://awaxman11.github.io/atom.xml" rel="self"/>
  <link href="http://awaxman11.github.io/"/>
  <updated>2014-10-26T11:34:28-04:00</updated>
  <id>http://awaxman11.github.io/</id>
  <author>
    <name><![CDATA[Adam Waxman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create  an Angular App Using Yeoman and Deploy it to Heroku]]></title>
    <link href="http://awaxman11.github.io/blog/2014/07/13/how-to-create-an-angular-app-using-yeoman-and-deploy-it-to-heroku/"/>
    <updated>2014-07-13T14:57:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2014/07/13/how-to-create-an-angular-app-using-yeoman-and-deploy-it-to-heroku</id>
    <content type="html"><![CDATA[<h4>Step 1: Install Yeoman</h4>

<p><a href="http://yeoman.io/">Yeoman</a> is a tool to help easily create new projects. You can use its generators to create all different types of web apps (Angular, Backbone, Ember, and <a href="http://yeoman.io/generators/official.html">many</a> <a href="http://yeoman.io/generators/community.html">more</a>).</p>

<p>Having node and npm installed on your computer is a requirement for using Yeoman. If you do not have the installed on your computer, follow these installation instructions <a href="http://blog.nodeknockout.com/post/65463770933/how-to-install-node-js-and-npm">here</a>.</p>

<p>Once node and npm are installed, install Yeoman by running <code>npm install -g yo</code>.</p>

<h4>Step 2: Create an Angular App using the Yeoman Anglar Generator</h4>

<p>Now that Yeoman is installed, you can easily create an Angular app by following the instructions below. These are taken from the yeoman angular generator repo readme, which can be found <a href="https://github.com/yeoman/generator-angular">here</a>.</p>

<p>Install generator-angular: <code>npm install -g generator-angular</code>.</p>

<p>Make a new directory and cd into it: <code>mkdir project-name &amp;&amp; cd project-name</code>.</p>

<p>Create the angular app: <code>yo angular [app-name]</code> (the app name parameter is optional).</p>

<p>You will be asked if you want yeoman to install SASS (with Compass), Twitter Bootstrap, and include various angular modules. You can learn more about these opitons under the &ldquo;Configure your generator&rdquo; <a href="http://yeoman.io/codelab/scaffold-app.html">here</a>. Below I do not install SASS or Bootstrap, but do include the various angular modules, so I type <code>y</code>, <code>y</code>, and then press enter.</p>

<p><img src="http://cl.ly/WYXe/Image%202014-07-13%20at%203.52.56%20PM.png" alt="" /></p>

<p>After letting yeoman do its magic, you can run the app locally with the following command:  <code>grunt serve</code>.</p>

<p>You should now see something like this on localhost:9000:</p>

<p><img src="http://f.cl.ly/items/2c451L3A0z2y0c3e3g0E/Image%202014-07-09%20at%208.49.13%20AM.png" title="The Angular app running locally" ></p>

<h4>Step 3: Add a Server to the App</h4>

<p>This step is taken primarily from <a href="https://twitter.com/foxwisp">Brad Barrow&rsquo;s</a> awesome <a href="http://www.sitepoint.com/deploying-yeomanangular-app-heroku/">tutorial</a>, with some slight updates to make it work using the latest version of Express (a web development framework for node.js).</p>

<p>As Brad explains, the angular app created by Yeoman is static, so we can&rsquo;t expect it to work on Heroku out of the box. In order for Heroky to be able to serve the pages for us we need to add a server to the app.</p>

<p>The server&rsquo;s dependencies include Gzippo, Morgan, and Express.</p>

<p>To install these dependencies run <code>npm install gzippo express morgan --save</code>.</p>

<p>Next, create a server file called web.js in the room director <code>/web.js</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gzippo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gzippo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">morgan</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;morgan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">morgan</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">gzippo</span><span class="p">.</span><span class="nx">staticGzip</span><span class="p">(</span><span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/dist&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">5000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the server file has been created, we need grunt to build the /dist directory that we are serving in line 6 of our web.js file.</p>

<p>We can create this directory by running <code>grunt build</code>.</p>

<h4>Step 4: Add Heroku Dependencies</h4>

<p>By default the dist that we just createdis included in the .gitignore file:</p>

<p><img src="http://f.cl.ly/items/3D161R2V043C0V0m2O2K/Image%202014-07-09%20at%209.47.05%20AM.png" title="Default .gitignore file" ></p>

<p>Since Heroku uses git to deploy, we need to remove <code>dist</code> from the .gitignore file. As Brad explains nicely in his tutorial:</p>

<p>&ldquo;It’s worth noting that the dist/ directory is ignored by git by default (they assume you only want to version control the development project, not the compiled app). Since Heroku uses git to deploy, we’ll need to remove dist/ from .gitignore to make sure it gets committed.&rdquo;</p>

<p><em>Note: While this gets the app up and running on Heroku, it is bad practice to version control the compiled app. I looked around but couldn&rsquo;t figure out how to compile an angular app on the server on Heroku. If anyway knows of a good way to do this I&rsquo;d love to hear from you and add it to this post!</em></p>

<p>Next, we need to turn the project directory into a git repo by running <code>git init</code>.</p>

<p>In addition to making it a git repo we need to create a Procfile, which Heroku uses to understand how to start the app.</p>

<p>Create the Procfile in the root directly just like the web.js file and inlcude the following line, which tells Heroku to use NodeJS to run our web.js file.</p>

<p><code>web: node web.js</code>.</p>

<p>The next step requires that you have a Heroku account and the Heroku Toolbelt installed. You can get setup with a Heroku account <a href="heroku.com">here</a> and download the Heroku Toolbelt <a href="https://toolbelt.heroku.com/">here</a>.</p>

<p>Once you have a Heroku account and the Heroku Toolbelt installed, you can create a Heroku app by running:</p>

<p><code>heroku create &lt;your_app_name&gt;</code>.</p>

<p>The next step is to commit all the code and push it to Heroku:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;Create angular app using Yeoman&quot;</span>
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>You need at least 1 web worker to get your app running. You can scale your Heroky web worker to 1 by running the following command:</p>

<p><code>heroku ps:scale web=1</code></p>

<p>Ta da, now your app should be running at &lt;your_app_name>.herokuapp.com. To quickly open your app run <code>heroku open</code></p>

<p>Let me know if you have any questions or any problems while setting up and deploying your app!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Into CSS3 Animations]]></title>
    <link href="http://awaxman11.github.io/blog/2014/01/25/getting-into-css3-animations/"/>
    <updated>2014-01-25T15:56:00-05:00</updated>
    <id>http://awaxman11.github.io/blog/2014/01/25/getting-into-css3-animations</id>
    <content type="html"><![CDATA[<p>I recently had the opprtunity to dive into some CSS3 animations. I&rsquo;ve used libraries like <a href="animate.css">animate.css</a> and done animations with javascript, but never did any custom CSS3 work</p>

<h4>The Task</h4>

<p>We recently updated our &lsquo;tracking&rsquo; iconography at SeatGeek to match our new iPhone app. The lead designer created the heart icon with different states in a PSD and also created the animation below:</p>

<p><img src="https://f.cloud.github.com/assets/4431362/1728894/c3f1a952-62b6-11e3-819f-ed196c859568.gif" alt="" /></p>

<h4>What is CSS3 Animation?</h4>

<p>In CSS, animation is an effect that lets an element gradually change styles. You create the animations with the @keyframes keyword, which is followed by the name of the animation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">heartAnimation</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* Animation code goes here */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make the animation cross browser compatible you need to use vendor prefixes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">heartAnimation</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* IE 10+ */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-webkit-keyframes</span> <span class="nt">heartAnimation</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* Safari 4+ */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-moz-keyframes</span> <span class="nt">heartAnimation</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* Fx 5+ */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-o-keyframes</span> <span class="nt">heartAnimation</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* Opera 12+ */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
However, for the rest of this post I will exclude the vendor prefixes for the sake of space.</p>

<p>The next step is to add the animation effects and decide when they happen. You can do this with either percentages from 0% to 100% or with the &lsquo;from&rsquo; and &lsquo;to&rsquo; keyword for simple animations with just a starting and ending state. Below is an example for changing the background color from yellow to blue, and then yellow to green to blue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">colorChange</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">from</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;}</span>
</span><span class='line'>  <span class="nt">to</span>   <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">colorChange</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span>   <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;}</span>
</span><span class='line'>  <span class="nt">50</span><span class="o">%</span>  <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;}</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the keyframes are created, you can call the animations as CSS properties. For example the code below would run the colorChange animation above 2 times for a 2s duration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.color-animation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">name</span><span class="o">:</span> <span class="n">changeColor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">iteration</span><span class="o">-</span><span class="n">count</span><span class="o">:</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">2s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Shorthand */</span>
</span><span class='line'><span class="nc">.color-animation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">changeColor</span> <span class="m">2</span> <span class="m">2s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can check out all the CSS3 animation properties <a href="http://www.w3schools.com/cssref/css3_pr_animation.asp">here</a></p>

<h4>Planning Out the Animation</h4>

<p>After watching the gif several times, I realized it was a slight contraction followed by an expansion to a size slightly larger than the original size, and then back to the original size.</p>

<h4>Heart Clicked Animation</h4>

<p>Using the CSS3 keyframes and animation syntax above, here is the code I used to make the animation in the gif at the top of this page. It uses the css transform and property to scale the image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">heartAnimation</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span>  <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="o">,</span><span class="m">1</span><span class="p">)}</span>
</span><span class='line'>  <span class="nt">20</span><span class="o">%</span> <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">9</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">9</span><span class="p">)}</span>
</span><span class='line'>  <span class="nt">50</span><span class="o">%</span> <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="o">.</span><span class="m">15</span><span class="o">,</span><span class="m">1</span><span class="o">.</span><span class="m">15</span><span class="p">)}</span>
</span><span class='line'>  <span class="nt">80</span><span class="o">%</span> <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="o">,</span><span class="m">1</span><span class="p">)}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.toggle-animation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">heartAnimation</span> <span class="m">0.7s</span><span class="p">;</span> <span class="o">//</span> <span class="n">no</span> <span class="n">iteration</span> <span class="n">count</span> <span class="n">is</span> <span class="n">needed</span> <span class="n">as</span> <span class="n">the</span> <span class="k">default</span> <span class="n">is</span> <span class="m">1</span> <span class="n">time</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the image, I was using a sprite, so I also needed to change the position of the image to get the red background:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.toggle-animation</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(&#39;../images/animation-example-sprite.png&#39;)</span> <span class="k">no-repeat</span> <span class="m">-320px</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">heartAnimation</span> <span class="m">0.7s</span><span class="p">;</span> <span class="o">//</span> <span class="n">no</span> <span class="n">iteration</span> <span class="n">count</span> <span class="n">is</span> <span class="n">needed</span> <span class="n">as</span> <span class="n">the</span> <span class="k">default</span> <span class="n">is</span> <span class="m">1</span> <span class="n">times</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Loading Animation</h4>

<p>For a loading state, I made the heart white and pulsate in-and-out infinitely. It also scales down and back to the original size, instead of getting slightly larger than the original size before going to the original state like in the heartAnimation code above. Below is the code for the loading state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">loading</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="o">,</span><span class="m">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">50</span><span class="o">%</span> <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">8</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">8</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span><span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="o">,</span><span class="m">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Notice the added &#39;infinite&#39; to is used to make the animation-iteration-count */</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.toggle-loading</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(&#39;../images/animation-example-sprite.png&#39;)</span> <span class="k">no-repeat</span> <span class="m">-160px</span> <span class="m">0</span><span class="p">;</span> <span class="o">//</span> <span class="n">make</span> <span class="k">background</span> <span class="nb">white</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">loading</span> <span class="m">1s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">loading</span> <span class="m">1s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">loading</span> <span class="m">1s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">loading</span> <span class="m">1s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Check Out Demos of the Animations</h4>

<p>Here is a site I built to demo the animations:</p>

<p><a href="http://heart-animation.herokuapp.com/">http://heart-animation.herokuapp.com/</a></p>

<p>Below is the JS I used to make the animations happen when each icon is clicked. The JS adds and removes the classes that I added the animation properties to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.animation-1 .image&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;toggle-animation&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.animation-2 .image&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;toggle-animation-slow&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.animation-3 .image&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;toggle-loading&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting a Rails Resource Based on a Calculated Value]]></title>
    <link href="http://awaxman11.github.io/blog/2013/10/11/sorting-a-rails-resource-based-on-a-calculated-value/"/>
    <updated>2013-10-11T09:32:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/10/11/sorting-a-rails-resource-based-on-a-calculated-value</id>
    <content type="html"><![CDATA[<h3>The Setup</h3>

<p>I recently went to a mobile payments hackathon and worked on a <a href="http://lit-sands-3416.herokuapp.com/">reminder app</a> with my co-founder of <a href="http://flockwithme.com">Flock</a>. You input the name of your item and the day of the month that it&rsquo;s due. The app then shows you how long you have to complete the given task based on a green to red spectrum inspired by Clear.</p>

<p><img src="http://awaxman11.github.io/images/reminder_app.png"></p>

<p>Being a hackathon project, we wanted to keep the app simple. It contained a Reminder model with 2 attributes: 1) name and 2) day of the month you want to complete the task.</p>

<h3>The Problem</h3>

<p>I got to a point where I wanted to sort the items by number of days left until the item was due.</p>

<p>If I had a column in the database called &lsquo;days_until_due&rsquo; I could have used the order method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Reminder</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;days_until_due ASC&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I didn&rsquo;t have a database column called &lsquo;days_until_due&#8217;…</p>

<p>This got me asking myself, &ldquo;What&rsquo;s the best way to sort a model based on a calculated value instead of a value stored in the database?&rdquo;</p>

<h3>The Solution</h3>

<p>After googling around I stumbled upon a nice solution. It suggested creating an instance method to calculate the value, and then creating a class method that combines a query with the sort_by method.</p>

<h5>Step 1: Create an instance method to calculate the value</h5>

<p>In reminder.rb, I created an instance method to find out how many days until the item is due based on the day of the month the item was suppoed to be completed by and the current date:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">days_until_due</span>
</span><span class='line'>  <span class="n">today</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="n">simple_today</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">today</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="n">today</span><span class="o">.</span><span class="n">month</span><span class="p">,</span> <span class="n">today</span><span class="o">.</span><span class="n">day</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">day</span> <span class="o">&gt;=</span> <span class="n">today</span><span class="o">.</span><span class="n">day</span>
</span><span class='line'>    <span class="n">month_due</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="n">month</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">month_due</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="n">month</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">day_due</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">today</span><span class="o">.</span><span class="n">year</span><span class="p">,</span><span class="n">month_due</span><span class="p">,</span><span class="n">day</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="n">day_due</span> <span class="o">-</span> <span class="n">simple_today</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="p">))</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Step 2: Create a class method to query and sort the model</h5>

<p>Again in reminder.rb, I then created a class method, which combined a query, sort_by, and the instance method from above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sorted_by_days_until_due</span>
</span><span class='line'>  <span class="no">Reminder</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:days_until_due</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may be asking yourself what is going on in that one line method? Let&rsquo;s break it down step by step. First, Reminder.all returns an array of all the reminders (unsorted).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Reminder</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Array</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I call the sort_by method on this array. This method takes a block as an argument and generates a sorted array by mapping the values through the given block. If no block is given, an enumerator is returned instead. Below is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Michael&quot;</span><span class="p">,</span> <span class="s2">&quot;Adam&quot;</span><span class="p">,</span> <span class="s2">&quot;Jen&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="p">}</span> <span class="c1"># =&gt; [&quot;Jen&quot;, &quot;Adam&quot;, &quot;Michael&quot;] </span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">sort_by</span> <span class="c1"># =&gt; #&lt;Enumerator: [&quot;Michael&quot;, &quot;Adam&quot;, &quot;Jen&quot;]:sort_by&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you&rsquo;re probably asking yourself, but how does &lsquo;&amp;:days_until_due&rsquo; translate into a block? It has to do with procs and blocks. If you&rsquo;re unfamiliar with these terms, you should check out a <a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/">post</a> I wrote discussing these parts of ruby. In one sentence, the &lsquo;&amp;:&rsquo; syntax is converting the instance method into a proc, and then converting the proc into a block, which is what Array#sort_by takes as an argument.</p>

<p>Below I will make the example above look like the method I used in my reminder app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Michael&quot;</span><span class="p">,</span> <span class="s2">&quot;Adam&quot;</span><span class="p">,</span> <span class="s2">&quot;Jen&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Passing in a block directly</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="p">}</span> <span class="c1"># =&gt; [&quot;Jen&quot;, &quot;Adam&quot;, &quot;Michael&quot;] </span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Creating a proc and converting the block to a proc using the &#39;&amp;&#39; syntax</span>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="ss">:length</span><span class="o">.</span><span class="n">to_proc</span> <span class="c1"># =&gt; #&lt;Proc:0x007f98a225f700&gt; </span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;Jen&quot;, &quot;Adam&quot;, &quot;Michael&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Creating a proc and converting the block to a proc in one step</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:length</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;Jen&quot;, &quot;Adam&quot;, &quot;Michael&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above syntax works by combining implicit type casting with the &lsquo;&amp;&rsquo; operator. The &lsquo;&amp;&rsquo; operator is used in an argument list to convert a Proc instance into a block. If you combine the operator with something other than a Proc instance, implicit type casting will try to convert it to a Proc instance using the to_proc method. Since Symbol#to_proc exists, when we pass a symbol after the &lsquo;&amp;&rsquo; operator, it is converted into a proc, which is then converted into a block.</p>

<p>Going back to my original problem, all this talk about procs and blocks and type casting is what allowed me to create the following one line method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sorted_by_days_until_due</span>
</span><span class='line'>  <span class="no">Reminder</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:days_until_due</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method allowed me to succinctly include a sorted array of reminders in my view with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@reminders</span> <span class="o">=</span> <span class="no">Reminder</span><span class="o">.</span><span class="n">sorted_by_days_until_due</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now back to coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying a Rails App With Capistrano (Part 2)]]></title>
    <link href="http://awaxman11.github.io/blog/2013/10/01/deploying-a-rails-app-with-capistrano-part-2/"/>
    <updated>2013-10-01T10:00:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/10/01/deploying-a-rails-app-with-capistrano-part-2</id>
    <content type="html"><![CDATA[<p>My last <a href="http://awaxman11.github.io/blog/2013/09/09/deploying-a-rails-app-with-capistrano/">post</a> outlined using Capistrano to deploy my 6-week long Flatiron School <a href="http://demo.hire.flatironschool.com/">project</a>. The post included a brief introduction of Capistrano, including what it is and the steps to get a Capfile (where Capistrano reads instructions from) into your app.</p>

<p>In this post, I am going to continue to walk through a basic deploy.rb file.  If you don&rsquo;t know what what a deploy.rb file is you should check out the earlier <a href="http://awaxman11.github.io/blog/2013/09/09/deploying-a-rails-app-with-capistrano/">post</a> first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span> <span class="c1"># for bundler support</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;set your application name here&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;set your repository location here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;USERNAME&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/</span><span class="si">#{</span> <span class="n">user</span> <span class="si">}</span><span class="s2">/</span><span class="si">#{</span> <span class="n">application</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s2">&quot;96.8.123.64&quot;</span>  <span class="c1"># Your HTTP server, Apache/etc</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="s2">&quot;96.8.123.64&quot;</span>  <span class="c1"># This may be the same as your `Web` server</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you want to clean up old releases on each deploy uncomment this:</span>
</span><span class='line'><span class="c1"># after &quot;deploy:restart&quot;, &quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you&#39;re still using the script/reaper helper you will need</span>
</span><span class='line'><span class="c1"># these http://github.com/rails/irs_process_scripts</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If you are using Passenger mod_rails uncomment this:</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:stop</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">run</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">try_sudo</span><span class="si">}</span><span class="s2"> touch </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span><span class="s1">&#39;restart.txt&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the previous post I left off with the set &lsquo;:scm, :git line&rsquo;, so I will start with the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is included to make sure Capistrano interacts properly with the shell on our server. For example, when using github your server needs to be able to access your repo. This capistrano config settting is needed for the password prompt from git to work so you can access it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s2">&quot;96.8.123.64&quot;</span> <span class="c1"># Your HTTP server, Apache/etc</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="s2">&quot;96.8.123.64&quot;</span> <span class="c1"># This may be the same as your Web server</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above two lines assign the web and app &lsquo;roles&rsquo; to specific servers. Capistrano roles allow you to have different servers handle different parts of the app (server for app, server for handling requests, and server for the database). We used one server for all aspects so assigned all roles to the same server.</p>

<p>Since we used Passenger, we also uncommented the :deploy namespace as is instructed in the standard deploy.rb file. This part of the file is an example of Capistrano&rsquo;s task-oriented nature. Similar to rake tasks, we can create &lsquo;cap&rsquo; tasks with the task keyword.  For example, take the following 3 lines of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:hello</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can run this code with the following command in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap hello
</span></code></pre></td></tr></table></div></figure>


<p>We also used a common capistrano task to symlink specific files that were purposely excluded from our git repo. For example, we had an application.yml file with our Crunchbase API key and gmail username/password. Since we open sourced the repo, we had to make sure that file was included in our .gitignore. Because capistrano is getting the code from github, we have to manually link these ignored files to the server in order for them to be included.  The following task helps us do just that.
ruby</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>task :symlink_config, :roles <span class="o">=</span>&gt; :app <span class="k">do </span>
</span><span class='line'><span class="k">  </span>run <span class="s2">&quot;ln -nfs #{shared_path}/config/application.yml #{release_path}/config/application.yml&quot;</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>In order for the symlink to work though, the file must already be in the shared folder on the server. You can securely copy a file from your local machine using a variation of the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp config/application.yml example@123.456.789.12:/home/example/example_app/shared
</span></code></pre></td></tr></table></div></figure>


<p>And that concludes my Capistrano configuration process.   To deploy and update the app I simply run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap deploy
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re interested in learning more about deploying a rails app with Capistrano, there is a good <a href="http://railscasts.com/episodes/133-capistrano-tasks-revised">railscast</a> and also a nice <a href="https://github.com/capistrano/capistrano/wiki">wiki</a> on Github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying a Rails App With Capistrano (Part 1)]]></title>
    <link href="http://awaxman11.github.io/blog/2013/09/09/deploying-a-rails-app-with-capistrano/"/>
    <updated>2013-09-09T12:03:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/09/09/deploying-a-rails-app-with-capistrano</id>
    <content type="html"><![CDATA[<p>I recently graduated from the Flatiron School, where I worked on a 6-week long project with a group of 3 other students.  Our project, <a href="https://github.com/awaxman11/HireMe">HireMe</a>, is a CRM platform to help manage the interview process. We built the app using Rails and deployed it onto a cloud server using Capistrano (along with Nginx and Passenger). For side projects I&rsquo;ve used Heroku, so this was my first time deploying to my own server.</p>

<h3>What is Capistrano?</h3>

<p>Capistrano is a remote server automation and deployment tool written in ruby. Put simply, it helps you get your code on a server and easily run commands on a server so your application is ready for the world to use.</p>

<h3>Using Capistrano</h3>

<p>The first step in using capitstrano is installing the capistrano gem on your local machine. Capistrano only requires that your have access to your server via Secure Shell (SSH).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install capistrano
</span></code></pre></td></tr></table></div></figure>


<p>Once the gem is installed the next step is to cd into your repository&rsquo;s directory and run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>capify .
</span></code></pre></td></tr></table></div></figure>


<p>This creates a Capfile, which is where Capistrano reads instructions from. This is what it looks like out of the package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'><span class="c1"># Uncomment if you are using Rails&#39; asset pipeline</span>
</span><span class='line'>    <span class="c1"># load &#39;deploy/assets&#39;</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;config/deploy&#39;</span> <span class="c1"># remove this line to skip loading any of the default tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>The capify command also creates a file in the config directory called deploy.rb, which  the Capfile loads from as you can see above. The deploy file contains information about the servers you want to connect to and the tasks you want to run on those servers.</p>

<p>Below is the default deploy.rb file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;set your application name here&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;set your repository location here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># set :scm, :git # You can set :scm explicitly or Capistrano will make an intelligent guess based on known version control directory names</span>
</span><span class='line'><span class="c1"># Or: `accurev`, `bzr`, `cvs`, `darcs`, `git`, `mercurial`, `perforce`, `subversion` or `none`</span>
</span><span class='line'>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s2">&quot;your web-server here&quot;</span>                          <span class="c1"># Your HTTP server, Apache/etc</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="s2">&quot;your app-server here&quot;</span>                          <span class="c1"># This may be the same as your `Web` server</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="s2">&quot;your primary db-server here&quot;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="c1"># This is where Rails migrations will run</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="s2">&quot;your slave db-server here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you want to clean up old releases on each deploy uncomment this:</span>
</span><span class='line'><span class="c1"># after &quot;deploy:restart&quot;, &quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you&#39;re still using the script/reaper helper you will need</span>
</span><span class='line'><span class="c1"># these http://github.com/rails/irs_process_scripts</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If you are using Passenger mod_rails uncomment this:</span>
</span><span class='line'><span class="c1"># namespace :deploy do</span>
</span><span class='line'><span class="c1">#   task :start do ; end</span>
</span><span class='line'><span class="c1">#   task :stop do ; end</span>
</span><span class='line'><span class="c1">#   task :restart, :roles =&gt; :app, :except =&gt; { :no_release =&gt; true } do</span>
</span><span class='line'><span class="c1">#     run &quot;#{try_sudo} touch #{File.join(current_path,&#39;tmp&#39;,&#39;restart.txt&#39;)}&quot;</span>
</span><span class='line'><span class="c1">#   end</span>
</span><span class='line'><span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We worked off of an awesome deployment guide by <a href="https://twitter.com/spike666">Spike Grobstein</a> that recommended starting with the following deploy.rb file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span> <span class="c1"># for bundler support</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;set your application name here&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;set your repository location here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;USERNAME&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/</span><span class="si">#{</span> <span class="n">user</span> <span class="si">}</span><span class="s2">/</span><span class="si">#{</span> <span class="n">application</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s2">&quot;96.8.123.64&quot;</span>                          <span class="c1"># Your HTTP server, Apache/etc</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="s2">&quot;96.8.123.64&quot;</span>                          <span class="c1"># This may be the same as your `Web` server</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you want to clean up old releases on each deploy uncomment this:</span>
</span><span class='line'><span class="c1"># after &quot;deploy:restart&quot;, &quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you&#39;re still using the script/reaper helper you will need</span>
</span><span class='line'><span class="c1"># these http://github.com/rails/irs_process_scripts</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If you are using Passenger mod_rails uncomment this:</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:stop</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">run</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">try_sudo</span><span class="si">}</span><span class="s2"> touch </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span><span class="s1">&#39;restart.txt&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This version differs slightly from the default deploy.rb file, namely adding lines to set the user information, where to deploy to, and a couple other small settings. Below are some exaplanations of each of the lines in this file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;studentbody&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code sets the application variable.  It will become the name of the overarching folder on the server and is also used in the deploy_to location a couple lines below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;set your repository location here&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#example</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:YourGithubUsername/ExampleRepo.git&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The repository variable tells Capistrano where to find your code.  We used a github hosted repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;USERNAME&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above line sets the name of the user we are deploying as.  For example if you are SSHing into your server with the following command &lsquo;ssh <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#x31;&#x39;&#x32;&#x2e;&#x32;&#x34;&#x31;&#x2e;&#53;&#x35;&#53;&#46;&#x35;&#53;">&#x65;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#x40;&#49;&#x39;&#50;&#x2e;&#x32;&#52;&#x31;&#x2e;&#x35;&#x35;&#x35;&#46;&#53;&#53;</a>&rsquo; then you&rsquo;d set :user to example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/</span><span class="si">#{</span> <span class="n">user</span> <span class="si">}</span><span class="s2">/</span><span class="si">#{</span> <span class="n">application</span> <span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command sets the location of deployment.  In the case where the the user is jsmith11 and the app name is example-app, the above code would deploy the app to &lsquo;/home/jsmith11/example-app&rsquo; directory on the remote server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>The user_sudo variable tells Capistrano whether or not to prefix sudo infront of all commands. Sudo is a prefix that allows you to run programs with the security priveledges of another user (commonly used with the superuser/root). In our case we were deploying to a location that our user owned, so we set this to false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span></code></pre></td></tr></table></div></figure>


<p>The scm variable sets the source-code-management system, which in our case was git.</p>

<p>In a follow up post I will talk more about the rest of the deploy.rb file, custom tasks we ran in our HireMe app, and getting the app up and running using the &lsquo;cap deploy&rsquo; command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to deploy an app in 5 minutes using roots]]></title>
    <link href="http://awaxman11.github.io/blog/2013/08/20/how-to-deploy-an-app-in-5-minutes-using-roots/"/>
    <updated>2013-08-20T00:03:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/08/20/how-to-deploy-an-app-in-5-minutes-using-roots</id>
    <content type="html"><![CDATA[<h3>The Ingredients</h3>

<ul style="margin-left: 30px;">
  <li><strong><a href="http://nodejs.org/">node.js</a></strong>: server-side JavaScript</li>
  <li><strong><a href="https://heroku.com">heroku</a></strong>: cloud platform as a service to help you easily deploy your apps</li>
  <li><strong><a href="http://roots.cx">roots</a></strong> (the special sauce): a tool for quickly building beautiful and efficient web products</li>
</ul>


<h3>The Steps</h3>

<h4>1. Install node</h4>

<p>If you don&rsquo;t have node.js, install it from <a href="http://nodejs.org/">nodejs.org</a>.</p>

<h4>2. Install roots</h4>

<p>Once node.js is installed, you can can install roots in the terminal with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install roots -g <span class="c"># prefix with sudo if you get a permission error</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. Create a new roots project</h4>

<p>You can create a new roots project with the following command in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>roots new <span class="o">[</span>name of project<span class="o">]</span> <span class="c"># i.e. roots new new_project</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. Start the local server</h4>

<p>Once you&rsquo;ve switched into the new project folder, you can start the app on localhost:1111 with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>roots watch
</span></code></pre></td></tr></table></div></figure>


<h4>5. Deploy to heroku</h4>

<p>Now you&rsquo;re one small command away from having your app up on Heroku for the world to see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>roots deploy
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it&rsquo;s that easy.  If you don&rsquo;t believe me checkout the <a href="http://ancient-escarpment-6672.herokuapp.com/">app</a> I made while going through the roots tutorial.</p>

<p>Checkout your own app with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku open
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Note: The standard homepage markup is placed in a views folder with the name &lsquo;index.jade&rsquo;.  If you don&rsquo;t want to use the default roots stack (jade, stylus, and coffeescript), you can revert to an html, css, and javascript stack by adding the &mdash;basic flag to your roots new command.</p>

<h3>Awesome features</h3>

<p>In addition to helping you get an app up and running in just a couple minutes, roots also has a ton of amazing built in features.</p>

<p><strong><a href="http://livereload.com/">LiveReload</a></strong>: lets you see your markup and styling changes without having to refresh your browser
<strong><a href="http://roots.cx/axis/">Axis | Better CSS</a></strong>: a css library built on top of stylus that helps take the pain out of traditional css</p>

<h3>Axis in action</h3>

<p>An example of how Axis makes css easier is how it simplifies border radius.  The following code shows how to create a border radius that works across different browsers: first using standard css, and then using Axis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Standard css border radius styling */</span>
</span><span class='line'><span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Using axis to add a border radius */</span>
</span><span class='line'><span class="nt">div</span>
</span><span class='line'>  <span class="nt">border-radius</span><span class="o">:</span> <span class="nt">5px</span><span class="o">;</span> <span class="c">/* vendor prefixes are added automatically */</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The button in the example <a href="http://ancient-escarpment-6672.herokuapp.com/">page</a> uses the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.button</span> <span class="nt">a</span>
</span><span class='line'>  <span class="nt">simple-button</span><span class="o">:</span> <span class="nt">blue</span> <span class="nt">15</span>
</span><span class='line'>  <span class="nt">transition</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Border-radius? Included. An easy on the eyes blue? Included. Darken on hover? Included. Yep, it&rsquo;s super convenient. There are a lot of other cool features you can check out via the library&rsquo;s <a href="http://roots.cx/axis/">documentation</a>.</p>

<h3>This is just the tip of the iceberg</h3>

<p>There are a lot of other awesome features that I haven&rsquo;t talked about above &ndash; for example dynamic content and js templates.  The roots creator, <a href="https://twitter.com/jescalan">@jescalan</a>, has some great video tutorials that you can find <a href="http://roots.cx/#tutorials">here</a> if you are interested in learning more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is the difference between a block, a proc, and a lambda in ruby?]]></title>
    <link href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/"/>
    <updated>2013-08-05T23:52:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block</id>
    <content type="html"><![CDATA[<h3>What are blocks, procs, and lambdas?</h3>

<p><strong>Coder Talk</strong>: Examples of <em>closures</em> in ruby.</p>

<p><strong>Plain old english</strong>: Ways of grouping code we want to run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Block Examples</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>   <span class="c1"># block is in between the curly braces</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span>                    <span class="c1"># block is everything between the do and end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Proc Examples             </span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>              <span class="c1"># The &#39;&amp;&#39; tells ruby to turn the proc into a block </span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>                     <span class="c1"># The body of the Proc object gets executed when called</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Lambda Examples            </span>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lam</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<p>While it looks like these are all very similar, there are subtle differences that I will cover below.</p>

<h3>Differences between Blocks and Procs</h3>

<ol style="margin-left: 23px;">
  <p></p>
  <li><strong>Procs are objects, blocks are not</strong></li>
  <p></p>


<p></p>A proc (notice the lowercase p) is an instance of the Proc class.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
This lets us call methods on it and assign it to variables. Procs can also return themselves.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span>  <span class="c1"># prints &#39;Hello World&#39;</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns &#39;Proc&#39;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">p</span>   <span class="c1"># a now equals p, a Proc instance</span>
</span><span class='line'><span class="nb">p</span>       <span class="c1"># returns a proc object &#39;#&lt;Proc:0x007f96b1a60eb0@(irb):46&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p></p>
In contrast, a block is just part of the *syntax* of a method call. It doesn&#8217;t mean anything on a standalone basis and can only appear in argument lists.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">}</span>       <span class="c1"># syntax error  </span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">}</span>   <span class="c1"># syntax error</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">}</span> <span class="c1"># only works as part of the syntax of a method call</span>
</span></code></pre></td></tr></table></div></figure>
  <li><strong>At most one block can appear in an argument list</strong></li>

<p></p>In contrast, you can pass multiple procs to methods.  
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">multiple_procs</span><span class="p">(</span><span class="n">proc1</span><span class="p">,</span> <span class="n">proc2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">proc1</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="n">proc2</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;First proc&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Second proc&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">multiple_procs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</ol>


<h3>Differences between Procs and Lambdas</h3>

<p>Before I get into the differences between procs and lambdas, it is important to mention that they are both Proc objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns &#39;Proc&#39;</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">class</span>  <span class="c1"># returns &#39;Proc&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, lambdas are a different &lsquo;flavor&rsquo; of procs.  This slight difference is shown when returning the objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span>   <span class="c1"># returns &#39;#&lt;Proc:0x007f96b1032d30@(irb):75&gt;&#39;</span>
</span><span class='line'><span class="n">lam</span>    <span class="c1"># returns &#39;&lt;Proc:0x007f96b1b41938@(irb):76 (lambda)&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The (lambda) notation is a reminder that while procs and lambdas are very similar, even both instances of the Proc class, they are also slightly different.  Below are the key differences.</p>

<ol style="margin-left: 23px;">
  <li><strong>Lambdas check the number of arguments, while procs do not</strong></li>
  <p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>    <span class="c1"># creates a lambda that takes 1 argument</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                    <span class="c1"># prints out 2</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span>                       <span class="c1"># ArgumentError: wrong number of arguments (0 for 1)</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>                <span class="c1"># ArgumentError: wrong number of arguments (3 for 1)</span>
</span></code></pre></td></tr></table></div></figure>

In contrast, procs don&#8217;t care if they are passed the wrong number of arguments.  

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># creates a proc that takes 1 argument</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                   <span class="c1"># prints out 2</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>                      <span class="c1"># returns nil</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>               <span class="c1"># prints out 1 and forgets about the extra arguments</span>
</span></code></pre></td></tr></table></div></figure>
As shown above, procs don&#8217;t freak out and raise errors if they are passed the wrong number of arguments. If the proc requires an argument but no argument is passed then the proc returns nil.  If too many arguments are passed than it ignores the extra arguments.

  <p></p>
  <li><strong>Lambdas and procs treat the &#8216;return&#8217; keyword differently</strong></li>
  <p></p>

&#8216;return&#8217; inside of a lambda triggers the code right outside of the lambda code

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">lambda_test</span>
</span><span class='line'>  <span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">lam</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda_test</span>                 <span class="c1"># calling lambda_test prints &#39;Hello World&#39;</span>
</span></code></pre></td></tr></table></div></figure>

&#8216;return&#8217; inside of a proc triggers the code outside of the method where the proc is being executed

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_test</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc_test</span>                 <span class="c1"># calling proc_test prints nothing</span>
</span></code></pre></td></tr></table></div></figure>
</ol>


<h3>So what is a closure?</h3>

<p><strong>Coder Talk</strong>: &lsquo;A function or a reference to a function together with a referencing environment.  Unlike a plain function, closures allow a function to access non-local variables even when invoked outside of its immediate lexical scope.&rsquo; &ndash; Wikipedia</p>

<p><strong>Plain old english</strong>: Similar to a suitcase, it&rsquo;s a group of code that when opened (i.e. called), contains whatever was in it when you packed it (i.e. created it).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Example of Proc objects preserving local context</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">counter</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">n</span><span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">counter</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 1</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 2</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">counter</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Background Part 1: Lambda Calculus and Anonymous Functions</h3>

<p>Lambda get its name from a type of calculus introduced in the 1930s to help investigate the foundations of mathematics.  Lambda calculus helps make computable functions easier to study by simplifying its semantics.  The most relevant of these simplifications is that is treats functions &lsquo;anonymously&rsquo;, meaning that no explicit names are given to functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sqsum</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span>  <span class="c1">#&lt;-- normal function</span>
</span><span class='line'><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span> <span class="c1">#&lt;-- anonymous function</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Generally speaking, in programming the term lambda refers to anonymous functions.  These anonymous functions are very common and explicit in some languages (i.e. Javascript) and implicit in others (i.e. Ruby).</p>

<h3>Background Part 2: Where Does the Name Proc Come From</h3>

<p>Proc is short for procedure, which is a set of instructions packaged as a unit to perform a specific task.  In different languages these may be called functions, routines, methods, or the generic term callable units.  They are usually made to be called multiple times and from multiple times in a program.</p>

<h3>Summary Differences</h3>

<ol style="margin-left: 23px;">
  <li><strong>Procs are objects, blocks are not</strong></li>
  <li><strong>At most one block can appear in an argument list</strong></li>
  <li><strong>Lambdas check the number of arguments, while procs do not</strong></li>
  <li><strong>Lambdas and procs treat the &#8216;return&#8217; keyword differently</strong></li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How jQuery and AJAX Actually Work]]></title>
    <link href="http://awaxman11.github.io/blog/2013/07/21/checking-out-js/"/>
    <updated>2013-07-21T23:13:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/07/21/checking-out-js</id>
    <content type="html"><![CDATA[<p>As someone who loves UX and design, it is not surprising that I&rsquo;ve been wanting to learn about JavaScript &ndash; the language of the browser that allows for cool client side interactions. I&rsquo;ve used many JS libraries, but wanted to dive deeper into AJAX. Before today I didn&rsquo;t even know what it meant, just that it was something I wanted to know more about.</p>

<h3>So What is AJAX?</h3>

<p>AJAX, or Asynchronous Javascript And XML, is a client side technique for communication with a web server.  In other words, it allows you to fetch data &lsquo;in the background&rsquo; without having to reload a whole page.</p>

<p>In a typical web request, you send a URL request to the server and the server responds with the corresponding HTML, CSS, and JavaScript that generates a full new page in your browser.</p>

<p>In contrast, in a typical AJAX request, the HTML, CSS, and JavaScript is already loaded. Instead of making a URL request for another whole page, you use JavaScript to talk to the server and receive smaller pieces of information that can range from HTML to other data formats like JSON and XML. The JavaScript then acts on the response and updates the page accordingly, without having to refresh the entire page.</p>

<h3>What does an AJAX request look like?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">settings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> At a high level an AJAX request consists of the URL you a making a request to, and then corresponding settings to handle the response.  Below are a few of the more popular callbacks that make up the settings:</p>

<ul style="margin-left: 30px;">
  <li><strong>success</strong>: what to do if the URL request is successful</li>
  <li><strong>error</strong>: what to do if the URL request is unsuccessful</li>
  <li><strong>timeout</strong>: how long to allow the URL request to run before an error message pops up</li>
  <li><strong>beforeSend</strong>: runs before the AJAX request, good place to put a spinner</li>
    <li><strong>complete</strong>: runs after both success and error, good place to stop a spinner</li>
</ul>


<h3>Examples</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* Example 1 */</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.hello-world&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 1: makes a request to &lsquo;index.html&rsquo; and then inserts the response into the item in the DOM that has a class called &ldquo;hello-world&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* Example 2 */</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;profile.html?userId=1&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.show&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Example 3 */</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;profile.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.show&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;userId&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Example 4 */</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;profile.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.show&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;userId&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.show&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;userId&quot;</span><span class="p">)}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Corresponding HTML to go with Example 4 */</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;show&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">userId</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These three examples all make a request to the url &lsquo;profile.html?userId=1&rsquo; and show the various ways to send parameters with a request.  In example 2 the data is put manually into the URL.  In example 3 the data is put into a JavaScript object.  Lastly, in example 4 the AJAX request pulls data from HTML, which when combined with ERB tags can make the request very dynamic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* Example 5 */</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.hello-world&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">timeout</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">beforeSend</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.hello-world&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;is-loading&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.hello-world&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;.is-loading&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 5 demonstrates some of the callback settings.  In this AJAX request, if the response is not successfully made it will stop the request after 3 seconds (3000 milliseconds).  It also demonstrates common code for adding a loading animation while the request is being made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Mobile App Landing Page]]></title>
    <link href="http://awaxman11.github.io/blog/2013/07/02/building-a-mobile-app-landing-page/"/>
    <updated>2013-07-02T12:50:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/07/02/building-a-mobile-app-landing-page</id>
    <content type="html"><![CDATA[<p>Over the last year I&rsquo;ve been working on a mobile app called Flock. To get ready for our launch, I created a new <a href="http://flockwithme.com">landing page</a> to allow people to easily download the app.  On a desktop browser, it allows people to input their phone number and receive a text on their phone with a link to download the app.  On a mobile device, it allows people to download the app directly.</p>

<p><img src="http://awaxman11.github.io/images/Launch-site-blog-image.png"></p>

<h4>The Ingredients</h4>

<ul style="margin-left: 30px;">
  <li><a href="http://twilio.com">Twilio</a>: An API to make and receive phone calls and send and receive text messages. I used this service to send a text message to desktop users containing a link to download the app.</li>
  <li><a href="http://fancyapps.com/fancybox/">fancyBox</a>: Tool for displaying images, html content and multi-media in a Mac-style &#8220;lightbox&#8221; that floats overtop of web page</li>
  <li><a href="http://tympanus.net/Development/CreativeButtons/">Creative Buttons</a>: Button inspirations from Codrops</li>
  <li>SASS/Bourbon/Neat:
    <ul>
      <li><a href="http://sass-lang.com/">SASS</a>: A CSS extension that adds nested rules, variables, mixins, and selector inheritance</li>
      <li><a href="http://bourbon.io/">Bourbon</a>: A mixin library for SASS</li>
      <li><a href="http://neat.bourbon.io/">Neat</a>: A grid framework for SASS with Bourbon</li>
    </ul>
  </li>
</ul>


<h4>Sending a Text</h4>

<p>My first step was to get the text message part of the landing page working.  High level I wanted to be able to send users a text message with a link to download Flock on their iPhone.  To do this, I created a form to collect a user&rsquo;s phone number, and then utilized a Twilio gem to send a message to the collected number.</p>

<p>Using the &lsquo;twilio-ruby&rsquo; gem I was able to get a text message up and running relatively quickly by creating a form and adding the Twilio logic in the route associated with that form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">send_text</span>
</span><span class='line'>    <span class="n">number</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span> <span class="c1"># grab user&#39;s number from form and assign to &#39;number&#39; variable</span>
</span><span class='line'>    <span class="n">account_sid</span> <span class="o">=</span> <span class="s1">&#39;**********************************&#39;</span> <span class="c1"># received after creating an account with Twilio</span>
</span><span class='line'>    <span class="n">auth_token</span> <span class="o">=</span> <span class="s1">&#39;********************************&#39;</span> <span class="c1"># same as above</span>
</span><span class='line'>    <span class="vi">@client</span> <span class="o">=</span> <span class="ss">Twilio</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="n">account_sid</span><span class="p">,</span> <span class="n">auth_token</span> <span class="c1"># create a Twilio client (used to send messages)</span>
</span><span class='line'>    <span class="vi">@client</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">sms</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span> <span class="c1"># method on client to create an sms message</span>
</span><span class='line'>      <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s1">&#39;+15555555555&#39;</span><span class="p">,</span> <span class="c1"># my Twilio number in actual code</span>
</span><span class='line'>      <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="n">number</span><span class="p">,</span> <span class="c1"># user&#39;s number</span>
</span><span class='line'>      <span class="ss">:body</span> <span class="o">=&gt;</span> <span class="s1">&#39;Download Flock and do more together: flockwithme.com/app&#39;</span> <span class="c1"># text message content</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Making it Look Pretty Part 1: Adding a fancyBox</h4>

<p>I wanted to use javascript on the &ldquo;SEND ME A LINK&rdquo; button so that the website didn&rsquo;t have to load a new page to display the number form.  Not wanting to re-invent the wheel, I looked around for js plugins and ended up choosing fancyBox, a library to easily implement &ldquo;lightbox&rdquo; popups.</p>

<p>To implement this plugin, there were a couple main steps:</p>

<ol style="margin-left: 30px;">
  <li>Create a hidden div containing the number form</li>
  <li>Link a button to the hidden div</li>
  <li>Add the necessary js from fancyBox</li>
</ol>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># STEP 1: Add hidden div containing form
</span><span class='line'># Note: id = &quot;number_form&quot;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;display:none&quot;</span> <span class="na">class=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;number_form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= form_tag(send_text_path, :method =&gt; :post) do %&gt;
</span><span class='line'>      <span class="err">&lt;</span>%= text_field_tag(:number, nil, :placeholder =&gt; &#39;555-555-5555&#39;)%&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= submit_tag(&quot;Submit&quot;) %&gt;
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># STEP 2: Creata a button that links to the hidden div
</span><span class='line'># Note: class = &quot;fancybox&quot; and href = &quot;#number_form&quot; (id of div from STEP 1)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#number_form&quot;</span> <span class="na">class=</span><span class="s">&quot;fancybox&quot;</span><span class="nt">&gt;&lt;div&gt;</span>SEND ME A LINK<span class="nt">&lt;/div&gt;&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'># STEP 3: Add the fancyBox js to show the div when the button is clicked
</span><span class='line'># Note: I am calling the function &quot;fancybox&quot; on all links
</span><span class='line'>#       that have a class named &quot;fancybox&quot; (from STEP 2)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a.fancybox&quot;</span><span class="p">).</span><span class="nx">fancybox</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">maxWidth</span><span class="o">:</span> <span class="mi">900</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">helpers</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">overlay</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">css</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s1">&#39;background&#39;</span> <span class="o">:</span> <span class="s1">&#39;rgba(0, 0, 0, 0.8)&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Making it Look Pretty Part 2: A Fancy Button</h4>

<p><img src="http://awaxman11.github.io/images/fancy-button.png" title="Fancy Button" ></p>

<p>Once I got the fancyBox working, I wanted to customize the styling of the form. Earlier in the week I stumbled across an awesome <a href="http://tympanus.net/Development/CreativeButtons/">link</a> from Codrops that had examples of many different buttons using CSS.  I chose my favorite and added the appropriate CSS.</p>

<p>The button I chose gives a 3D effect by creating a shadow and making the shadow smaller / shifting down the button while hovering over the button, and removing the shadow all together when clicked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// Note I am using SASS, which allows me to nest my css</span>
</span><span class='line'>
</span><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">submit</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">border</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="na">cursor</span><span class="o">:</span> <span class="no">pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">15</span><span class="kt">px</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="na">margin</span><span class="o">:</span> <span class="mi">15</span><span class="kt">px</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="na">text-transform</span><span class="o">:</span> <span class="no">uppercase</span><span class="p">;</span>
</span><span class='line'>    <span class="na">position</span><span class="o">:</span> <span class="no">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="nv">$green</span><span class="p">;</span>
</span><span class='line'>    <span class="na">box-shadow</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">6</span><span class="kt">px</span> <span class="mh">#527a52</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="s2">&quot;proxima-nova&quot;</span><span class="o">,</span> <span class="s2">&quot;sans-serif&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-style</span><span class="o">:</span> <span class="no">italic</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="mi">800</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="na">border-radius</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span><span class="kt">px</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:hover</span><span class="p">{</span>
</span><span class='line'>    <span class="na">box-shadow</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">4</span><span class="kt">px</span> <span class="mh">#527a52</span><span class="p">;</span>
</span><span class='line'>    <span class="na">top</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:active</span><span class="p">{</span>
</span><span class='line'>      <span class="na">box-shadow</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mh">#527a52</span><span class="p">;</span>
</span><span class='line'>      <span class="na">top</span><span class="o">:</span> <span class="mi">6</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Making it Look Pretty Part 3: Responsive Design</h4>

<p>Once I got the button looking sharp on a desktop browser, I then wanted to make the page responsive for mobile users.  Not only did I want to change the styling so it looked good on a phone, but I also wanted to change the main button so that when a user opens the site on their iPhone the &ldquo;SEND ME A LINK&rdquo; button turns into a &ldquo;DOWNLOAD THE APP&rdquo; button that takes him or her directly to the App Store.</p>

<p>I made the button (and rest of the website) responsive using Bourbon and Neat. Bourbon is a mixin library for SASS, and Neat is a grid framework for SASS with Bourbon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// STEP 1: Define a mobile breakpoint (Neat version of CSS media query)</span>
</span><span class='line'><span class="nv">$break_four</span><span class="o">:</span> <span class="nf">new-breakpoint</span><span class="p">(</span><span class="no">max-width</span> <span class="mi">585</span><span class="kt">px</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// STEP 2: Define style to hide elements where class = &quot;mobile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.mobile</span> <span class="p">{</span>
</span><span class='line'> <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// STEP 3: Hide items where class = &quot;desktop&quot; and show </span>
</span><span class='line'><span class="c1">//         items where class = &quot;mobile&quot; at breakpoint</span>
</span><span class='line'>
</span><span class='line'><span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$break_four</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.desktop</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.mobile</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// STEP 4: Add classes where appropriate</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;div</span><span class="err"> </span><span class="na">id</span><span class="err">=&quot;</span><span class="na">button</span><span class="err">&quot;</span><span class="na">&gt;</span><span class="err">  </span>
</span><span class='line'>    <span class="na">&lt;a</span><span class="err"> </span><span class="na">href</span><span class="err">=&quot;</span><span class="na">#number_form</span><span class="err">&quot; </span><span class="na">class</span><span class="err">=&quot;</span><span class="na">desktop</span><span class="err"> </span><span class="na">fancybox</span><span class="err">&quot;</span><span class="na">&gt;&lt;div&gt;SEND</span><span class="err"> </span><span class="na">ME</span><span class="err"> </span><span class="na">A</span><span class="err"> </span><span class="na">LINK&lt;/div&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="na">&lt;a</span><span class="err"> </span><span class="na">href</span><span class="err">=&quot;</span><span class="na">http</span><span class="o">:</span><span class="c1">//bit.ly/11LgLAn&quot; class=&quot;mobile&quot;&gt;&lt;div&gt;DOWNLOAD THE APP&lt;/div&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And that&rsquo;s how to create a simple landing page for a mobile app!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Twitter API to Find People]]></title>
    <link href="http://awaxman11.github.io/blog/2013/06/17/twitter-api/"/>
    <updated>2013-06-17T00:12:00-04:00</updated>
    <id>http://awaxman11.github.io/blog/2013/06/17/twitter-api</id>
    <content type="html"><![CDATA[<h4>Inspiration</h4>

<p>Over the last year I&rsquo;ve become a huge Twitter fan.  So much so that I had to move it off the front page of my phone so I wouldn&rsquo;t be (as) distracted throughout the day.  In addition to my personal account, I have several accounts for projects I&rsquo;m working on.  I use these accounts to discover and interact with people that may be interested in these apps.</p>

<p>To discover people that I think may be interested, I look at recent followers of similar apps.  While this process worked alright, it was a very manual.  Also, one of the apps I&rsquo;m working on is only available in NYC, and there was no way to search for people only living in NYC and the surrounding area.</p>

<h4>Using the Twitter API</h4>

<p>I decided that I could use the Twitter API to help automate this process.  For example, let&rsquo;s pretend that I am creating starting a Ruby Motion meetup in NYC.  I&rsquo;d like to find people in the NYC area that are interested in Ruby Motion.  Using Twitter, I can find these people a couple of different ways:</p>

<ol style="margin-left: 30px;">
  <li>Look for people that follow @RubyMotion</li>
  <li>Look for people that recently tweeted &#8220;#rubymotion&#8221;</li>
</ol>


<p>In addition to finding people that match either of the criteria above, I also want to make sure they live in the NYC area.</p>

<h4>Getting Started</h4>

<p>I first looked into the best way to access the Twitter API from a ruby environment.  As Twitter is a very popular app, I figured there was likely a good gem.  After searching for &lsquo;Twitter&rsquo; on <a href="https://ruby-toolbox.com">www.ruby-toolbox.com</a>, I ended up deciding to go with the &lsquo;Twitter&rsquo; gem.  After installing this gem in the terminal, I required the rubygems gem and twitter gem in my ruby file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next I read the gem documentation on <a href="https://github.com/sferik/twitter">github</a>, and followed the steps to register and authorize my app.  After registering my app on the <a href="https://dev.twitter.com/apps/new">Twitter Developer site</a>, it was just a few lines of code before I was up and running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="s2">&quot;**********************&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="s2">&quot;*****************************************&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token</span> <span class="o">=</span> <span class="s2">&quot;**************************************************&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token_secret</span> <span class="o">=</span> <span class="s2">&quot;*****************************************&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I was up and running!  To tweet about the new meetup was just a simple line away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s2">&quot;Come on out to our Ruby Motion meetup next Tuesday @ 6:30pm!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for finding relevant people:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nyc_accounts</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">cursor</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Loop through pages 1-10</span>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span><span class="mi">15</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Iterate through followes</span>
</span><span class='line'>    <span class="n">followers</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">.</span><span class="n">followers</span><span class="p">(</span><span class="s2">&quot;RubyMotion&quot;</span><span class="p">,</span> <span class="ss">:cursor</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Save the users </span>
</span><span class='line'>    <span class="n">followers</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>      <span class="n">rubymotion_accounts</span><span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">location</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">downcase</span> <span class="o">=~</span> <span class="sr">/(nyc|york)/i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cursor</span> <span class="o">=</span> <span class="n">followers</span><span class="o">.</span><span class="n">next_cursor</span>
</span><span class='line'>    <span class="n">index</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above makes a call to the Twitter API to grab the followers for a sprcific Twitter account, in this case RubyMotion.  The way the Twitter API works, each call returns an object that contains an array of 20 seperate hashes, which contain information about each of the followers. Because the API rate limits of the Twitter API are relatively small, I decided to loop through only 15 pages of followers.</p>

<p>Next, I went through each Twitter object and added the username and location of the follower if the location contained either nyc or york (using regular expressions). The result is a hash where the keys are usernames and the values are locations for, containing information of people that follow RubyMotion and have a location that contains either &lsquo;NYC&rsquo; or &lsquo;York&rsquo;.</p>

<p>On to the next one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rubymotion_accounts_2</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;#rubymotion&quot;</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">:result_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;recent&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">status</span><span class="o">|</span>
</span><span class='line'>  <span class="n">rubymotion_accounts_2</span><span class="o">[</span><span class="n">status</span><span class="o">.</span><span class="n">attrs</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:screen_name</span><span class="o">]]=</span><span class="n">status</span><span class="o">.</span><span class="n">attrs</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:location</span><span class="o">]</span> <span class="k">if</span> <span class="n">status</span><span class="o">.</span><span class="n">attrs</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:location</span><span class="o">].</span><span class="n">downcase</span> <span class="o">=~</span> <span class="sr">/(nyc|york)/i</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>For the second call, I a utilizing the search method, and querying the most recent 100 tweets that contain the #rubymotion tag.  This call returns a Twitter object that contains an array of all the tweets.  Each item of the array contains a hash with information about the user.  I then saved the username and location of the tweeter if the location of that person contained &lsquo;NYC&rsquo; or &lsquo;York&rsquo; again.</p>

<p>Saving the data into a database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;sqlite3&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;twitter-bot.db&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">execute</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh"> </span>
</span><span class='line'><span class="sh">  create table twitter_handles (</span>
</span><span class='line'><span class="sh">    id INTEGER PRIMARY KEY AUTOINCREMENT,</span>
</span><span class='line'><span class="sh">    twitter_handle TEXT,</span>
</span><span class='line'><span class="sh">    city TEXT</span>
</span><span class='line'><span class="sh">  );</span>
</span><span class='line'><span class="no">SQL</span>
</span><span class='line'>
</span><span class='line'><span class="n">rubymotion_accounts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">handle</span><span class="p">,</span> <span class="n">city</span><span class="o">|</span>
</span><span class='line'>  <span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO twitter_handles (twitter_handle, city) </span>
</span><span class='line'><span class="s2">              VALUES (?, ?)&quot;</span><span class="p">,</span> <span class="o">[</span><span class="n">handle</span><span class="p">,</span> <span class="n">city</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">rubymotion_accounts_2</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">handle</span><span class="p">,</span> <span class="n">city</span><span class="o">|</span>
</span><span class='line'>  <span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO twitter_handles (twitter_handle, city) </span>
</span><span class='line'><span class="s2">              VALUES (?, ?)&quot;</span><span class="p">,</span> <span class="o">[</span><span class="n">handle</span><span class="p">,</span> <span class="n">city</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, I wrote a schema.rb file to create a table and iterate through the 2 hashes I created above and insert the information into the new data.</p>

<h3>Areas of Future Exploration</h3>

<p>One problem I kept on running into was exceeding my API rate limit.  For example, in the first API call, the reason I only scroll through 15 pages is because the Twitter API only allows me to make 15 calls within a 15 minute window.  While finding 300 relevant people seems like a lot, when you add the location constraint it ends up not being that many people. Similarly in the 2nd API call, I only grab the last 100 tweets because that is all the API lets me grab at a time. This made it really hard to find many people that were relevant for this specific search.  When I ran this search I actually ended up with no results because, presumably because of the 100 tweets grabbed, no users were located in New York.</p>
]]></content>
  </entry>
  
</feed>
